// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:firstFlutterApp/model/forecast_entity_entity.dart';
import 'package:firstFlutterApp/generated/json/forecast_entity_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ForecastEntityEntity:
			return forecastEntityEntityFromJson(data as ForecastEntityEntity, json) as T;			case ForecastEntityList:
			return forecastEntityListFromJson(data as ForecastEntityList, json) as T;			case ForecastEntityListMain:
			return forecastEntityListMainFromJson(data as ForecastEntityListMain, json) as T;			case ForecastEntityListWeather:
			return forecastEntityListWeatherFromJson(data as ForecastEntityListWeather, json) as T;			case ForecastEntityListClouds:
			return forecastEntityListCloudsFromJson(data as ForecastEntityListClouds, json) as T;			case ForecastEntityListWind:
			return forecastEntityListWindFromJson(data as ForecastEntityListWind, json) as T;			case ForecastEntityListSys:
			return forecastEntityListSysFromJson(data as ForecastEntityListSys, json) as T;			case ForecastEntityCity:
			return forecastEntityCityFromJson(data as ForecastEntityCity, json) as T;			case ForecastEntityCityCoord:
			return forecastEntityCityCoordFromJson(data as ForecastEntityCityCoord, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ForecastEntityEntity:
			return forecastEntityEntityToJson(data as ForecastEntityEntity);			case ForecastEntityList:
			return forecastEntityListToJson(data as ForecastEntityList);			case ForecastEntityListMain:
			return forecastEntityListMainToJson(data as ForecastEntityListMain);			case ForecastEntityListWeather:
			return forecastEntityListWeatherToJson(data as ForecastEntityListWeather);			case ForecastEntityListClouds:
			return forecastEntityListCloudsToJson(data as ForecastEntityListClouds);			case ForecastEntityListWind:
			return forecastEntityListWindToJson(data as ForecastEntityListWind);			case ForecastEntityListSys:
			return forecastEntityListSysToJson(data as ForecastEntityListSys);			case ForecastEntityCity:
			return forecastEntityCityToJson(data as ForecastEntityCity);			case ForecastEntityCityCoord:
			return forecastEntityCityCoordToJson(data as ForecastEntityCityCoord);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ForecastEntityEntity':
			return ForecastEntityEntity().fromJson(json);			case 'ForecastEntityList':
			return ForecastEntityList().fromJson(json);			case 'ForecastEntityListMain':
			return ForecastEntityListMain().fromJson(json);			case 'ForecastEntityListWeather':
			return ForecastEntityListWeather().fromJson(json);			case 'ForecastEntityListClouds':
			return ForecastEntityListClouds().fromJson(json);			case 'ForecastEntityListWind':
			return ForecastEntityListWind().fromJson(json);			case 'ForecastEntityListSys':
			return ForecastEntityListSys().fromJson(json);			case 'ForecastEntityCity':
			return ForecastEntityCity().fromJson(json);			case 'ForecastEntityCityCoord':
			return ForecastEntityCityCoord().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ForecastEntityEntity':
			return List<ForecastEntityEntity>();			case 'ForecastEntityList':
			return List<ForecastEntityList>();			case 'ForecastEntityListMain':
			return List<ForecastEntityListMain>();			case 'ForecastEntityListWeather':
			return List<ForecastEntityListWeather>();			case 'ForecastEntityListClouds':
			return List<ForecastEntityListClouds>();			case 'ForecastEntityListWind':
			return List<ForecastEntityListWind>();			case 'ForecastEntityListSys':
			return List<ForecastEntityListSys>();			case 'ForecastEntityCity':
			return List<ForecastEntityCity>();			case 'ForecastEntityCityCoord':
			return List<ForecastEntityCityCoord>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}